/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.41
 * Generated at: 2023-11-23 13:53:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.webapps.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class CouleurListForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Liste des Couleurs</title>\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/style.css\">\n");
      out.write("    <!-- Inclure les fichiers CSS/JS si nécessaire -->\n");
      out.write("    <!-- http://localhost:8080/demo/webapps/jsp/CouleurListForm.jsp -->\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <!-- Inclure le menu -->\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "menu.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("    <h1>Liste des Couleurs</h1>\n");
      out.write("    <form id=\"deleteCouleurForm\">\n");
      out.write("        <table>\n");
      out.write("            <tr>\n");
      out.write("                <th>ID</th>\n");
      out.write("                <th>Nom</th>\n");
      out.write("                <th>Hexadecimal RVB</th>\n");
      out.write("                <th>Supprimer</th>\n");
      out.write("                <th>Modifier</th>\n");
      out.write("            </tr>\n");
      out.write("            <!-- Les lignes de la table seront remplis par un script JavaScript -->\n");
      out.write("        </table>\n");
      out.write("        <input type=\"submit\" value=\"Supprimer les couleurs sélectionnées\">\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        window.onload = function() {\n");
      out.write("            fetch('http://localhost:8080/couleur')\n");
      out.write("                .then(response => response.json())\n");
      out.write("                .then(data => {\n");
      out.write("                    var table = document.querySelector('#deleteCouleurForm table');\n");
      out.write("                    data.forEach(function(couleur) {\n");
      out.write("                        var row = table.insertRow();\n");
      out.write("                        row.insertCell().textContent = couleur.id;\n");
      out.write("                        row.insertCell().textContent = couleur.nom;\n");
      out.write("                        row.insertCell().textContent = couleur.hexadecimal_rvb;\n");
      out.write(" \n");
      out.write("                        // Ajouter une checkbox pour la suppression\n");
      out.write("                        var deleteCell = row.insertCell();\n");
      out.write("                        var checkbox = document.createElement('input');\n");
      out.write("                        checkbox.type = 'checkbox';\n");
      out.write("                        checkbox.name = 'delete';\n");
      out.write("                        checkbox.value = couleur.id;\n");
      out.write("                        deleteCell.appendChild(checkbox);\n");
      out.write("\n");
      out.write("                        // Ajouter un bouton pour la modification\n");
      out.write("                        var modifyCell = row.insertCell();\n");
      out.write("                        var modifyButton = document.createElement('button');\n");
      out.write("                        modifyButton.textContent = 'Modifier';\n");
      out.write("                        modifyButton.onclick = function() {\n");
      out.write("                            event.preventDefault(); // Empêcher la soumission du formulaire\n");
      out.write("                            window.location.href = 'CouleurUpdateForm.jsp?id=' + couleur.id;\n");
      out.write("                        };\n");
      out.write("                        modifyCell.appendChild(modifyButton);\n");
      out.write("                    });\n");
      out.write("                })\n");
      out.write("                .catch(error => console.error('Error:', error));\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        document.getElementById('deleteCouleurForm').addEventListener('submit', function(event) {\n");
      out.write("            event.preventDefault();\n");
      out.write("\n");
      out.write("            var checkboxes = document.querySelectorAll('input[name=\"delete\"]:checked');\n");
      out.write("            if (checkboxes.length === 0) {\n");
      out.write("                alert(\"Aucune couleur n'est sélectionnée pour la suppression.\");\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("            // Afficher un popup de confirmation\n");
      out.write("            var userConfirmed = confirm(\"Êtes-vous sûr de vouloir supprimer les couleurs sélectionnées ?\");\n");
      out.write("            if (!userConfirmed) {\n");
      out.write("                return; // Arrêter si l'utilisateur n'a pas confirmé\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("                     \n");
      out.write("            var idsToDelete = Array.from(checkboxes).map(cb => cb.value);\n");
      out.write("\n");
      out.write("            idsToDelete.forEach(function(id) {\n");
      out.write("                fetch('http://localhost:8080/couleur', {\n");
      out.write("                    method: 'DELETE',\n");
      out.write("                    headers: {\n");
      out.write("                        'Content-Type': 'application/json',\n");
      out.write("                    },\n");
      out.write("                    body: JSON.stringify({ id: parseInt(id) })\n");
      out.write("                })\n");
      out.write("                .then(response => {\n");
      out.write("                    if (!response.ok) {\n");
      out.write("                        throw new Error('Network response was not ok: ' + response.statusText);\n");
      out.write("                    }\n");
      out.write("                    return response.json();\n");
      out.write("                })\n");
      out.write("                .then(data => {\n");
      out.write("                    console.log('Couleur supprimée:', data);\n");
      out.write("                    // Vous pouvez ici actualiser la page ou supprimer la ligne correspondante du tableau\n");
      out.write("                     window.location.reload(); // Recharger la page\n");
      out.write("                })\n");
      out.write("                .catch(error => {\n");
      out.write("                    console.error('Error:', error);\n");
      out.write("                });\n");
      out.write("            });\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
