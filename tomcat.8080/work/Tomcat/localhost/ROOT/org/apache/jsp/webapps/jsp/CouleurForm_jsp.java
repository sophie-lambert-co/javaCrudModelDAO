/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.41
 * Generated at: 2023-11-23 13:55:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.webapps.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class CouleurForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Create Couleur</title>\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/style.css\">\n");
      out.write("    <!-- Inclure les fichiers CSS/JS si nécessaire -->\n");
      out.write("    <!-- http://localhost:8080/demo/webapps/jsp/CouleurForm.jsp -->\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("         <!-- Inclure le menu -->\n");
      out.write("         ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "menu.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("    <h1>Alimentations</h1>\n");
      out.write("    <h2>Create Couleur Form</h2>\n");
      out.write("    <form id=\"createCouleurForm\" action=\"/couleur\" method=\"post\">\n");
      out.write("        <label for=\"nom\">Nom de la Couleur:</label>\n");
      out.write("        <input type=\"text\" id=\"nom\" name=\"nom\" required><br><br>\n");
      out.write("        \n");
      out.write("        <label for=\"hexadecimal_rvb\">Code Hexadecimal RGB:</label>\n");
      out.write("        <input type=\"text\" id=\"hexadecimal_rvb\" name=\"hexadecimal_rvb\" required><br><br>\n");
      out.write("        \n");
      out.write("        <input type=\"submit\" value=\"Submit\">\n");
      out.write("    </form>\n");
      out.write("    <!-- Élément pour afficher la réponse -->\n");
      out.write("    <div id=\"response\"></div>\n");
      out.write("    <script>\n");
      out.write("        document.getElementById('createCouleurForm').addEventListener('submit', function(event) {\n");
      out.write("            event.preventDefault();\n");
      out.write("\n");
      out.write("            var formData = new FormData(this);\n");
      out.write("            var jsonData = {};\n");
      out.write("\n");
      out.write("            for (var [key, value] of formData.entries()) {\n");
      out.write("                jsonData[key] = value;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            console.log(jsonData);\n");
      out.write("\n");
      out.write("            fetch('http://localhost:8080/couleur', {\n");
      out.write("                method: 'POST',\n");
      out.write("                headers: {\n");
      out.write("                    'Content-Type': 'application/json',\n");
      out.write("                },\n");
      out.write("                body: JSON.stringify(jsonData)\n");
      out.write("            })\n");
      out.write("            .then(response => {\n");
      out.write("                if (!response.ok) {\n");
      out.write("                    throw new Error('Network response was not ok: ' + response.statusText);\n");
      out.write("                }\n");
      out.write("                return response.json();\n");
      out.write("            })\n");
      out.write("            .then(data => {\n");
      out.write("                // Traiter la réponse (par exemple, afficher un message de succès)\n");
      out.write("                document.getElementById('response').innerHTML = 'Response: ' + JSON.stringify(data);\n");
      out.write("            })\n");
      out.write("            .catch(error => {\n");
      out.write("                // Gérer les erreurs ici\n");
      out.write("                console.error('Error:', error);\n");
      out.write("            });\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
